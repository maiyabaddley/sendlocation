{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","pusher","Pusher","appId","key","secret","cluster","encrypted","App","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","console","log","latitude","longitude","accuracy","trigger","message","error","err","warn","code","className","onClick","navigator","geolocation","getCurrentPosition","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,+PCKvCC,G,OAAS,IAAIC,IAAO,CACtBC,MAAO,UACPC,IAAK,uBACLC,OAAQ,uBACRC,QAAS,MACTC,WAAW,KAsCEC,MAnCf,WACE,IAAIC,EAAU,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,GAGd,SAASC,EAAQC,GACf,IAAIC,EAAMD,EAAIE,OAEdC,QAAQC,IAAI,6BACZD,QAAQC,IAAR,qBAA0BH,EAAII,WAC9BF,QAAQC,IAAR,qBAA0BH,EAAIK,YAC9BH,QAAQC,IAAR,uBAA4BH,EAAIM,SAAhC,aAEApB,EAAOqB,QAAQ,WAAY,SAAU,CACnCC,QAASR,IAIb,SAASS,EAAMC,GACbR,QAAQS,KAAR,gBAAsBD,EAAIE,KAA1B,cAAoCF,EAAIF,UAK1C,OACE,yBAAKK,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAQC,QANd,WACEC,UAAUC,YAAYC,mBAAmBnB,EAASW,EAAOf,KAKrD,uBC9BYwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBZ,WACrBA,UAAUa,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLP,QAAQO,MAAMA,EAAMD,c","file":"static/js/main.7967c1e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport logo from './logo.svg'\nimport Pusher from 'pusher'\nimport './App.css'\n\nvar pusher = new Pusher({\n  appId: '1001976',\n  key: 'c89ddfcb850d146a202a',\n  secret: 'b4dc6883981a88f0f09a',\n  cluster: 'us3',\n  encrypted: true,\n})\n\nfunction App() {\n  var options = {\n    enableHighAccuracy: true,\n    timeout: 5000,\n    maximumAge: 0,\n  }\n\n  function success(pos) {\n    var crd = pos.coords\n\n    console.log('Your current position is:')\n    console.log(`Latitude : ${crd.latitude}`)\n    console.log(`Longitude: ${crd.longitude}`)\n    console.log(`More or less ${crd.accuracy} meters.`)\n\n    pusher.trigger('location', 'latlng', {\n      message: crd,\n    })\n  }\n\n  function error(err) {\n    console.warn(`ERROR(${err.code}): ${err.message}`)\n  }\n  function getLocation() {\n    navigator.geolocation.getCurrentPosition(success, error, options)\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={getLocation}>Send My Location</button>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}